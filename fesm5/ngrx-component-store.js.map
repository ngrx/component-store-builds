{"version":3,"file":"ngrx-component-store.js","sources":["ng://@ngrx/component-store/src/debounceSync.ts","ng://@ngrx/component-store/src/component-store.ts"],"sourcesContent":["/**\n * @license MIT License\n *\n * Copyright (c) 2017-2020 Nicholas Jamieson and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n  asapScheduler,\n  MonoTypeOperatorFunction,\n  Observable,\n  Subscription,\n} from 'rxjs';\n\nexport function debounceSync<T>(): MonoTypeOperatorFunction<T> {\n  return source =>\n    new Observable<T>(observer => {\n      let actionSubscription: Subscription | undefined;\n      let actionValue: T | undefined;\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe({\n          complete: () => {\n            if (actionSubscription) {\n              observer.next(actionValue);\n            }\n            observer.complete();\n          },\n          error: error => observer.error(error),\n          next: value => {\n            actionValue = value;\n            if (!actionSubscription) {\n              actionSubscription = asapScheduler.schedule(() => {\n                observer.next(actionValue);\n                actionSubscription = undefined;\n              });\n              rootSubscription.add(actionSubscription);\n            }\n          },\n        })\n      );\n      return rootSubscription;\n    });\n}\n","import {\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  throwError,\n  combineLatest,\n  Subject,\n} from 'rxjs';\nimport {\n  concatMap,\n  takeUntil,\n  withLatestFrom,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n} from 'rxjs/operators';\nimport { debounceSync } from './debounceSync';\n\n/**\n * Return type of the effect, that behaves differently based on whether the\n * argument is passed to the callback.\n */\nexport interface EffectReturnFn<T> {\n  (): void;\n  (t: T | Observable<T>): Subscription;\n}\n\nexport class ComponentStore<T extends object> {\n  // Should be used only in ngOnDestroy.\n  private readonly destroySubject$ = new ReplaySubject<void>(1);\n  // Exposed to any extending Store to be used for the teardowns.\n  readonly destroy$ = this.destroySubject$.asObservable();\n\n  private readonly stateSubject$ = new ReplaySubject<T>(1);\n  private isInitialized = false;\n  // Needs to be after destroy$ is declared because it's used in select.\n  readonly state$: Observable<T> = this.select((s) => s);\n\n  constructor(defaultState?: T) {\n    // State can be initialized either through constructor, or initState or\n    // setState.\n    if (defaultState) {\n      this.initState(defaultState);\n    }\n  }\n\n  /** Completes all relevant Observable streams. */\n  ngOnDestroy() {\n    this.stateSubject$.complete();\n    this.destroySubject$.next();\n  }\n\n  /**\n   * Creates an updater.\n   *\n   * Throws an error if updater is called with synchronous values (either\n   * imperative value or Observable that is synchronous) before ComponentStore\n   * is initialized. If called with async Observable before initialization then\n   * state will not be updated and subscription would be closed.\n   *\n   * @param updaterFn A static updater function that takes 2 parameters (the\n   * current state and an argument object) and returns a new instance of the\n   * state.\n   * @return A function that accepts one argument which is forwarded as the\n   *     second argument to `updaterFn`. Everytime this function is called\n   *     subscribers will be notified of the state change.\n   */\n  updater<V>(\n    updaterFn: (state: T, value: V) => T\n  ): unknown extends V ? () => void : (t: V | Observable<V>) => Subscription {\n    return ((observableOrValue?: V | Observable<V>): Subscription => {\n      let initializationError: Error | undefined;\n      // We can receive either the value or an observable. In case it's a\n      // simple value, we'll wrap it with `of` operator to turn it into\n      // Observable.\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      const subscription = observable$\n        .pipe(\n          concatMap((value) =>\n            this.isInitialized\n              ? of(value).pipe(withLatestFrom(this.stateSubject$))\n              : // If state was not initialized, we'll throw an error.\n                throwError(\n                  Error(`${this.constructor.name} has not been initialized`)\n                )\n          ),\n          takeUntil(this.destroy$)\n        )\n        .subscribe({\n          next: ([value, currentState]) => {\n            this.stateSubject$.next(updaterFn(currentState, value!));\n          },\n          error: (error: Error) => {\n            initializationError = error;\n            this.stateSubject$.error(error);\n          },\n        });\n\n      if (initializationError) {\n        // prettier-ignore\n        throw /** @type {!Error} */ (initializationError);\n      }\n      return subscription;\n    }) as unknown extends V\n      ? () => void\n      : (t: V | Observable<V>) => Subscription;\n  }\n\n  /**\n   * Initializes state. If it was already initialized then it resets the\n   * state.\n   */\n  private initState(state: T): void {\n    this.isInitialized = true;\n    this.stateSubject$.next(state);\n  }\n\n  /**\n   * Sets the state specific value.\n   * @param stateOrUpdaterFn object of the same type as the state or an\n   * updaterFn, returning such object.\n   */\n  setState(stateOrUpdaterFn: T | ((state: T) => T)): void {\n    if (typeof stateOrUpdaterFn !== 'function') {\n      this.initState(stateOrUpdaterFn);\n    } else {\n      this.updater(stateOrUpdaterFn as (state: T) => T)();\n    }\n  }\n\n  /**\n   * Creates a selector.\n   *\n   * This supports chaining up to 4 selectors. More could be added as needed.\n   *\n   * @param projector A pure projection function that takes the current state and\n   *   returns some new slice/projection of that state.\n   * @return An observable of the projector results.\n   */\n  select<R>(projector: (s: T) => R): Observable<R>;\n  select<R, S1>(s1: Observable<S1>, projector: (s1: S1) => R): Observable<R>;\n  select<R, S1, S2>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    projector: (s1: S1, s2: S2) => R\n  ): Observable<R>;\n  select<R, S1, S2, S3>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    projector: (s1: S1, s2: S2, s3: S3) => R\n  ): Observable<R>;\n  select<R, S1, S2, S3, S4>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    s4: Observable<S4>,\n    projector: (s1: S1, s2: S2, s3: S3, s4: S4) => R\n  ): Observable<R>;\n  select<R>(...args: any[]): Observable<R> {\n    let observable$: Observable<R>;\n    // project is always the last argument, so `pop` it from args.\n    const projector: (...args: any[]) => R = args.pop();\n    if (args.length === 0) {\n      // If projector was the only argument then we'll use map operator.\n      observable$ = this.stateSubject$.pipe(map(projector));\n    } else {\n      // If there are multiple arguments, we're chaining selectors, so we need\n      // to take the combineLatest of them before calling the map function.\n      observable$ = combineLatest(args).pipe(\n        // The most performant way to combine Observables avoiding unnecessary\n        // emissions and projector calls.\n        debounceSync(),\n        map((args: any[]) => projector(...args))\n      );\n    }\n    const distinctSharedObservable$ = observable$.pipe(\n      distinctUntilChanged(),\n      shareReplay({\n        refCount: true,\n        bufferSize: 1,\n      }),\n      takeUntil(this.destroy$)\n    );\n    return distinctSharedObservable$;\n  }\n\n  /**\n   * Creates an effect.\n   *\n   * This effect is subscribed to for the life of the @Component.\n   * @param generator A function that takes an origin Observable input and\n   *     returns an Observable. The Observable that is returned will be\n   *     subscribed to for the life of the component.\n   * @return A function that, when called, will trigger the origin Observable.\n   */\n  effect<V, R = unknown>(\n    generator: (origin$: Observable<V>) => Observable<R>\n  ): EffectReturnFn<V> {\n    const origin$ = new Subject<V>();\n    generator(origin$)\n      // tied to the lifecycle ðŸ‘‡ of ComponentStore\n      .pipe(takeUntil(this.destroy$))\n      .subscribe();\n\n    return (observableOrValue?: V | Observable<V>): Subscription => {\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      return observable$.pipe(takeUntil(this.destroy$)).subscribe((value) => {\n        // any new ðŸ‘‡ value is pushed into a stream\n        origin$.next(value);\n      });\n    };\n  }\n}\n"],"names":[],"mappings":"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"}