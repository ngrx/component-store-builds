{"version":3,"file":"ngrx-component-store.js","sources":["../../../../modules/component-store/src/debounce-sync.ts","../../../../modules/component-store/src/component-store.ts"],"sourcesContent":["/**\n * @license MIT License\n *\n * Copyright (c) 2017-2020 Nicholas Jamieson and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n  asapScheduler,\n  MonoTypeOperatorFunction,\n  Observable,\n  Subscription,\n} from 'rxjs';\n\nexport function debounceSync<T>(): MonoTypeOperatorFunction<T> {\n  return (source) =>\n    new Observable<T>((observer) => {\n      let actionSubscription: Subscription | undefined;\n      let actionValue: T | undefined;\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe({\n          complete: () => {\n            if (actionSubscription) {\n              observer.next(actionValue);\n            }\n            observer.complete();\n          },\n          error: (error) => {\n            observer.error(error);\n          },\n          next: (value) => {\n            actionValue = value;\n            if (!actionSubscription) {\n              actionSubscription = asapScheduler.schedule(() => {\n                observer.next(actionValue);\n                actionSubscription = undefined;\n              });\n              rootSubscription.add(actionSubscription);\n            }\n          },\n        })\n      );\n      return rootSubscription;\n    });\n}\n","import {\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  throwError,\n  combineLatest,\n  Subject,\n  queueScheduler,\n  scheduled,\n} from 'rxjs';\nimport {\n  concatMap,\n  takeUntil,\n  withLatestFrom,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n  take,\n} from 'rxjs/operators';\nimport { debounceSync } from './debounce-sync';\nimport {\n  Injectable,\n  OnDestroy,\n  Optional,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\n\nexport interface SelectConfig {\n  debounce?: boolean;\n}\n\nexport const initialStateToken = new InjectionToken('ComponentStore InitState');\n\n@Injectable()\nexport class ComponentStore<T extends object> implements OnDestroy {\n  // Should be used only in ngOnDestroy.\n  private readonly destroySubject$ = new ReplaySubject<void>(1);\n  // Exposed to any extending Store to be used for the teardown.\n  readonly destroy$ = this.destroySubject$.asObservable();\n\n  private readonly stateSubject$ = new ReplaySubject<T>(1);\n  private isInitialized = false;\n  private notInitializedErrorMessage =\n    `${this.constructor.name} has not been initialized yet. ` +\n    `Please make sure it is initialized before updating/getting.`;\n  // Needs to be after destroy$ is declared because it's used in select.\n  readonly state$: Observable<T> = this.select((s) => s);\n\n  constructor(@Optional() @Inject(initialStateToken) defaultState?: T) {\n    // State can be initialized either through constructor or setState.\n    if (defaultState) {\n      this.initState(defaultState);\n    }\n  }\n\n  /** Completes all relevant Observable streams. */\n  ngOnDestroy() {\n    this.stateSubject$.complete();\n    this.destroySubject$.next();\n  }\n\n  /**\n   * Creates an updater.\n   *\n   * Throws an error if updater is called with synchronous values (either\n   * imperative value or Observable that is synchronous) before ComponentStore\n   * is initialized. If called with async Observable before initialization then\n   * state will not be updated and subscription would be closed.\n   *\n   * @param updaterFn A static updater function that takes 2 parameters (the\n   * current state and an argument object) and returns a new instance of the\n   * state.\n   * @return A function that accepts one argument which is forwarded as the\n   *     second argument to `updaterFn`. Every time this function is called\n   *     subscribers will be notified of the state change.\n   */\n  updater<V>(\n    updaterFn: (state: T, value: V) => T\n  ): unknown extends V ? () => void : (t: V | Observable<V>) => Subscription {\n    return ((observableOrValue?: V | Observable<V>): Subscription => {\n      let initializationError: Error | undefined;\n      // We can receive either the value or an observable. In case it's a\n      // simple value, we'll wrap it with `of` operator to turn it into\n      // Observable.\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      const subscription = observable$\n        .pipe(\n          concatMap((value) =>\n            this.isInitialized\n              ? // Push the value into queueScheduler\n                scheduled([value], queueScheduler).pipe(\n                  withLatestFrom(this.stateSubject$)\n                )\n              : // If state was not initialized, we'll throw an error.\n                throwError(new Error(this.notInitializedErrorMessage))\n          ),\n          takeUntil(this.destroy$)\n        )\n        .subscribe({\n          next: ([value, currentState]) => {\n            this.stateSubject$.next(updaterFn(currentState, value!));\n          },\n          error: (error: Error) => {\n            initializationError = error;\n            this.stateSubject$.error(error);\n          },\n        });\n\n      if (initializationError) {\n        // prettier-ignore\n        throw /** @type {!Error} */ (initializationError);\n      }\n      return subscription;\n    }) as unknown extends V\n      ? () => void\n      : (t: V | Observable<V>) => Subscription;\n  }\n\n  /**\n   * Initializes state. If it was already initialized then it resets the\n   * state.\n   */\n  private initState(state: T): void {\n    scheduled([state], queueScheduler).subscribe((s) => {\n      this.isInitialized = true;\n      this.stateSubject$.next(s);\n    });\n  }\n\n  /**\n   * Sets the state specific value.\n   * @param stateOrUpdaterFn object of the same type as the state or an\n   * updaterFn, returning such object.\n   */\n  setState(stateOrUpdaterFn: T | ((state: T) => T)): void {\n    if (typeof stateOrUpdaterFn !== 'function') {\n      this.initState(stateOrUpdaterFn);\n    } else {\n      this.updater(stateOrUpdaterFn as (state: T) => T)();\n    }\n  }\n\n  protected get(): T;\n  protected get<R>(projector: (s: T) => R): R;\n  protected get<R>(projector?: (s: T) => R): R | T {\n    if (!this.isInitialized) {\n      throw new Error(this.notInitializedErrorMessage);\n    }\n    let value: R | T;\n\n    this.stateSubject$.pipe(take(1)).subscribe((state) => {\n      value = projector ? projector(state) : state;\n    });\n    return value!;\n  }\n\n  /**\n   * Creates a selector.\n   *\n   * This supports combining up to 4 selectors. More could be added as needed.\n   *\n   * @param projector A pure projection function that takes the current state and\n   *   returns some new slice/projection of that state.\n   * @param config SelectConfig that changes the behavior of selector, including\n   *   the debouncing of the values until the state is settled.\n   * @return An observable of the projector results.\n   */\n  select<R>(projector: (s: T) => R, config?: SelectConfig): Observable<R>;\n  select<R, S1>(\n    s1: Observable<S1>,\n    projector: (s1: S1) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  select<R, S1, S2>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    projector: (s1: S1, s2: S2) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  select<R, S1, S2, S3>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    projector: (s1: S1, s2: S2, s3: S3) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  select<R, S1, S2, S3, S4>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    s4: Observable<S4>,\n    projector: (s1: S1, s2: S2, s3: S3, s4: S4) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  select<\n    O extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,\n    R,\n    ProjectorFn = (...a: unknown[]) => R\n  >(...args: O): Observable<R> {\n    const { observables, projector, config } = processSelectorArgs(args);\n\n    let observable$: Observable<unknown>;\n    // If there are no Observables to combine, then we'll just map the value.\n    if (observables.length === 0) {\n      observable$ = this.stateSubject$.pipe(\n        config.debounce ? debounceSync() : (source$) => source$,\n        map(projector)\n      );\n    } else {\n      // If there are multiple arguments, then we're aggregating selectors, so we need\n      // to take the combineLatest of them before calling the map function.\n      observable$ = combineLatest(observables).pipe(\n        config.debounce ? debounceSync() : (source$) => source$,\n        map((projectorArgs) => projector(...projectorArgs))\n      );\n    }\n    return (observable$ as Observable<R>).pipe(\n      distinctUntilChanged(),\n      shareReplay({\n        refCount: true,\n        bufferSize: 1,\n      }),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  /**\n   * Creates an effect.\n   *\n   * This effect is subscribed to for the life of the @Component.\n   * @param generator A function that takes an origin Observable input and\n   *     returns an Observable. The Observable that is returned will be\n   *     subscribed to for the life of the component.\n   * @return A function that, when called, will trigger the origin Observable.\n   */\n  effect<\n    // This type quickly became part of effect 'API'\n    ProvidedType = void,\n    // The actual origin$ type, which could be unknown, when not specified\n    OriginType extends Observable<ProvidedType> | unknown = Observable<\n      ProvidedType\n    >,\n    // Unwrapped actual type of the origin$ Observable, after default was applied\n    ObservableType = OriginType extends Observable<infer A> ? A : never,\n    // Return either an empty callback or a function requiring specific types as inputs\n    ReturnType = ProvidedType | ObservableType extends void\n      ? () => void\n      : (\n          observableOrValue: ObservableType | Observable<ObservableType>\n        ) => Subscription\n  >(generator: (origin$: OriginType) => Observable<unknown>): ReturnType {\n    const origin$ = new Subject<ObservableType>();\n    generator(origin$ as OriginType)\n      // tied to the lifecycle 👇 of ComponentStore\n      .pipe(takeUntil(this.destroy$))\n      .subscribe();\n\n    return (((\n      observableOrValue?: ObservableType | Observable<ObservableType>\n    ): Subscription => {\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      return observable$.pipe(takeUntil(this.destroy$)).subscribe((value) => {\n        // any new 👇 value is pushed into a stream\n        origin$.next(value);\n      });\n    }) as unknown) as ReturnType;\n  }\n}\n\nfunction processSelectorArgs<\n  O extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,\n  R,\n  ProjectorFn = (...a: unknown[]) => R\n>(\n  args: O\n): {\n  observables: Observable<unknown>[];\n  projector: ProjectorFn;\n  config: Required<SelectConfig>;\n} {\n  const selectorArgs = Array.from(args);\n  // Assign default values.\n  let config: Required<SelectConfig> = { debounce: false };\n  let projector: ProjectorFn;\n  // Last argument is either projector or config\n  const projectorOrConfig = selectorArgs.pop() as ProjectorFn | SelectConfig;\n\n  if (typeof projectorOrConfig !== 'function') {\n    // We got the config as the last argument, replace any default values with it.\n    config = { ...config, ...projectorOrConfig };\n    // Pop the next args, which would be the projector fn.\n    projector = selectorArgs.pop() as ProjectorFn;\n  } else {\n    projector = projectorOrConfig;\n  }\n  // The Observables to combine, if there are any.\n  const observables = selectorArgs as Observable<unknown>[];\n  return {\n    observables,\n    projector,\n    config,\n  };\n}\n"],"names":[],"mappings":"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"}