{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/component-store/migrations/18_0_0-beta/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport {\n  Tree,\n  Rule,\n  chain,\n  SchematicContext,\n} from '@angular-devkit/schematics';\nimport {\n  addPackageToPackageJson,\n  Change,\n  commitChanges,\n  createReplaceChange,\n  InsertChange,\n  visitTSSourceFiles,\n} from '../../schematics-core';\nimport * as os from 'os';\nimport { createRemoveChange } from '../../schematics-core/utility/change';\n\nexport function migrateTapResponseImport(): Rule {\n  return (tree: Tree, ctx: SchematicContext) => {\n    const changes: Change[] = [];\n    addPackageToPackageJson(tree, 'dependencies', '@ngrx/operators', '^18.0.0');\n\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const importDeclarations = new Array<ts.ImportDeclaration>();\n      getImportDeclarations(sourceFile, importDeclarations);\n\n      const componentStoreImportsAndDeclaration = importDeclarations\n        .map((componentStoreImportDeclaration) => {\n          const componentStoreImports = getComponentStoreNamedBinding(\n            componentStoreImportDeclaration\n          );\n          if (componentStoreImports) {\n            return { componentStoreImports, componentStoreImportDeclaration };\n          } else {\n            return undefined;\n          }\n        })\n        .find(Boolean);\n\n      if (!componentStoreImportsAndDeclaration) {\n        return;\n      }\n\n      const { componentStoreImports, componentStoreImportDeclaration } =\n        componentStoreImportsAndDeclaration;\n\n      const operatorsImportDeclaration = importDeclarations.find((node) =>\n        node.moduleSpecifier.getText().includes('@ngrx/operators')\n      );\n\n      const otherComponentStoreImports = componentStoreImports.elements\n        .filter((element) => element.name.getText() !== 'tapResponse')\n        .map((element) => element.name.getText())\n        .join(', ');\n\n      // Remove `tapResponse` from @ngrx/component-store and leave the other imports\n      if (otherComponentStoreImports) {\n        changes.push(\n          createReplaceChange(\n            sourceFile,\n            componentStoreImportDeclaration,\n            componentStoreImportDeclaration.getText(),\n            `import { ${otherComponentStoreImports} } from '@ngrx/component-store';`\n          )\n        );\n      }\n      // Remove complete @ngrx/component-store import because it contains only `tapResponse`\n      else {\n        changes.push(\n          createRemoveChange(\n            sourceFile,\n            componentStoreImportDeclaration,\n            componentStoreImportDeclaration.getStart(),\n            componentStoreImportDeclaration.getEnd() + 1\n          )\n        );\n      }\n\n      let importAppendedInExistingDeclaration = false;\n      if (operatorsImportDeclaration?.importClause?.namedBindings) {\n        const bindings = operatorsImportDeclaration.importClause.namedBindings;\n        if (ts.isNamedImports(bindings)) {\n          // Add import to existing @ngrx/operators\n          const updatedImports = [\n            ...bindings.elements.map((element) => element.name.getText()),\n            'tapResponse',\n          ];\n          const newOperatorsImport = `import { ${updatedImports.join(\n            ', '\n          )} } from '@ngrx/operators';`;\n          changes.push(\n            createReplaceChange(\n              sourceFile,\n              operatorsImportDeclaration,\n              operatorsImportDeclaration.getText(),\n              newOperatorsImport\n            )\n          );\n          importAppendedInExistingDeclaration = true;\n        }\n      }\n\n      if (!importAppendedInExistingDeclaration) {\n        // Add new @ngrx/operators import line\n        const newOperatorsImport = `import { tapResponse } from '@ngrx/operators';`;\n        changes.push(\n          new InsertChange(\n            sourceFile.fileName,\n            componentStoreImportDeclaration.getEnd() + 1,\n            `${newOperatorsImport}${os.EOL}`\n          )\n        );\n      }\n\n      commitChanges(tree, sourceFile.fileName, changes);\n\n      if (changes.length) {\n        ctx.logger.info(\n          `[@ngrx/component-store] Updated tapResponse to import from '@ngrx/operators'`\n        );\n      }\n    });\n  };\n}\n\nfunction getImportDeclarations(\n  node: ts.Node,\n  imports: ts.ImportDeclaration[]\n): void {\n  if (ts.isImportDeclaration(node)) {\n    imports.push(node);\n  }\n\n  ts.forEachChild(node, (childNode) =>\n    getImportDeclarations(childNode, imports)\n  );\n}\n\nfunction getComponentStoreNamedBinding(\n  node: ts.ImportDeclaration\n): ts.NamedImports | null {\n  const namedBindings = node?.importClause?.namedBindings;\n  if (\n    node.moduleSpecifier.getText().includes('@ngrx/component-store') &&\n    namedBindings &&\n    ts.isNamedImports(namedBindings)\n  ) {\n    return namedBindings;\n  }\n\n  return null;\n}\n\nexport default function (): Rule {\n  return chain([migrateTapResponseImport()]);\n}\n"]}