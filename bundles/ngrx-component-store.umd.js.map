{"version":3,"file":"ngrx-component-store.umd.js","sources":["ng://@ngrx/component-store/src/debounceSync.ts","ng://@ngrx/component-store/src/component-store.ts"],"sourcesContent":["/**\n * @license MIT License\n *\n * Copyright (c) 2017-2020 Nicholas Jamieson and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n  asapScheduler,\n  MonoTypeOperatorFunction,\n  Observable,\n  Subscription,\n} from 'rxjs';\n\nexport function debounceSync<T>(): MonoTypeOperatorFunction<T> {\n  return source =>\n    new Observable<T>(observer => {\n      let actionSubscription: Subscription | undefined;\n      let actionValue: T | undefined;\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe({\n          complete: () => {\n            if (actionSubscription) {\n              observer.next(actionValue);\n            }\n            observer.complete();\n          },\n          error: error => observer.error(error),\n          next: value => {\n            actionValue = value;\n            if (!actionSubscription) {\n              actionSubscription = asapScheduler.schedule(() => {\n                observer.next(actionValue);\n                actionSubscription = undefined;\n              });\n              rootSubscription.add(actionSubscription);\n            }\n          },\n        })\n      );\n      return rootSubscription;\n    });\n}\n","import {\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  throwError,\n  combineLatest,\n  Subject,\n} from 'rxjs';\nimport {\n  concatMap,\n  takeUntil,\n  withLatestFrom,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n} from 'rxjs/operators';\nimport { debounceSync } from './debounceSync';\n\n/**\n * Return type of the effect, that behaves differently based on whether the\n * argument is passed to the callback.\n */\nexport interface EffectReturnFn<T> {\n  (): void;\n  (t: T | Observable<T>): Subscription;\n}\n\nexport class ComponentStore<T extends object> {\n  // Should be used only in ngOnDestroy.\n  private readonly destroySubject$ = new ReplaySubject<void>(1);\n  // Exposed to any extending Store to be used for the teardowns.\n  readonly destroy$ = this.destroySubject$.asObservable();\n\n  private readonly stateSubject$ = new ReplaySubject<T>(1);\n  private isInitialized = false;\n  // Needs to be after destroy$ is declared because it's used in select.\n  readonly state$: Observable<T> = this.select((s) => s);\n\n  constructor(defaultState?: T) {\n    // State can be initialized either through constructor, or initState or\n    // setState.\n    if (defaultState) {\n      this.initState(defaultState);\n    }\n  }\n\n  /** Completes all relevant Observable streams. */\n  ngOnDestroy() {\n    this.stateSubject$.complete();\n    this.destroySubject$.next();\n  }\n\n  /**\n   * Creates an updater.\n   *\n   * Throws an error if updater is called with synchronous values (either\n   * imperative value or Observable that is synchronous) before ComponentStore\n   * is initialized. If called with async Observable before initialization then\n   * state will not be updated and subscription would be closed.\n   *\n   * @param updaterFn A static updater function that takes 2 parameters (the\n   * current state and an argument object) and returns a new instance of the\n   * state.\n   * @return A function that accepts one argument which is forwarded as the\n   *     second argument to `updaterFn`. Everytime this function is called\n   *     subscribers will be notified of the state change.\n   */\n  updater<V>(\n    updaterFn: (state: T, value: V) => T\n  ): unknown extends V ? () => void : (t: V | Observable<V>) => Subscription {\n    return ((observableOrValue?: V | Observable<V>): Subscription => {\n      let initializationError: Error | undefined;\n      // We can receive either the value or an observable. In case it's a\n      // simple value, we'll wrap it with `of` operator to turn it into\n      // Observable.\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      const subscription = observable$\n        .pipe(\n          concatMap((value) =>\n            this.isInitialized\n              ? of(value).pipe(withLatestFrom(this.stateSubject$))\n              : // If state was not initialized, we'll throw an error.\n                throwError(\n                  Error(`${this.constructor.name} has not been initialized`)\n                )\n          ),\n          takeUntil(this.destroy$)\n        )\n        .subscribe({\n          next: ([value, currentState]) => {\n            this.stateSubject$.next(updaterFn(currentState, value!));\n          },\n          error: (error: Error) => {\n            initializationError = error;\n            this.stateSubject$.error(error);\n          },\n        });\n\n      if (initializationError) {\n        // prettier-ignore\n        throw /** @type {!Error} */ (initializationError);\n      }\n      return subscription;\n    }) as unknown extends V\n      ? () => void\n      : (t: V | Observable<V>) => Subscription;\n  }\n\n  /**\n   * Initializes state. If it was already initialized then it resets the\n   * state.\n   */\n  private initState(state: T): void {\n    this.isInitialized = true;\n    this.stateSubject$.next(state);\n  }\n\n  /**\n   * Sets the state specific value.\n   * @param stateOrUpdaterFn object of the same type as the state or an\n   * updaterFn, returning such object.\n   */\n  setState(stateOrUpdaterFn: T | ((state: T) => T)): void {\n    if (typeof stateOrUpdaterFn !== 'function') {\n      this.initState(stateOrUpdaterFn);\n    } else {\n      this.updater(stateOrUpdaterFn as (state: T) => T)();\n    }\n  }\n\n  /**\n   * Creates a selector.\n   *\n   * This supports chaining up to 4 selectors. More could be added as needed.\n   *\n   * @param projector A pure projection function that takes the current state and\n   *   returns some new slice/projection of that state.\n   * @return An observable of the projector results.\n   */\n  select<R>(projector: (s: T) => R): Observable<R>;\n  select<R, S1>(s1: Observable<S1>, projector: (s1: S1) => R): Observable<R>;\n  select<R, S1, S2>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    projector: (s1: S1, s2: S2) => R\n  ): Observable<R>;\n  select<R, S1, S2, S3>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    projector: (s1: S1, s2: S2, s3: S3) => R\n  ): Observable<R>;\n  select<R, S1, S2, S3, S4>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    s4: Observable<S4>,\n    projector: (s1: S1, s2: S2, s3: S3, s4: S4) => R\n  ): Observable<R>;\n  select<R>(...args: any[]): Observable<R> {\n    let observable$: Observable<R>;\n    // project is always the last argument, so `pop` it from args.\n    const projector: (...args: any[]) => R = args.pop();\n    if (args.length === 0) {\n      // If projector was the only argument then we'll use map operator.\n      observable$ = this.stateSubject$.pipe(map(projector));\n    } else {\n      // If there are multiple arguments, we're chaining selectors, so we need\n      // to take the combineLatest of them before calling the map function.\n      observable$ = combineLatest(args).pipe(\n        // The most performant way to combine Observables avoiding unnecessary\n        // emissions and projector calls.\n        debounceSync(),\n        map((args: any[]) => projector(...args))\n      );\n    }\n    const distinctSharedObservable$ = observable$.pipe(\n      distinctUntilChanged(),\n      shareReplay({\n        refCount: true,\n        bufferSize: 1,\n      }),\n      takeUntil(this.destroy$)\n    );\n    return distinctSharedObservable$;\n  }\n\n  /**\n   * Creates an effect.\n   *\n   * This effect is subscribed to for the life of the @Component.\n   * @param generator A function that takes an origin Observable input and\n   *     returns an Observable. The Observable that is returned will be\n   *     subscribed to for the life of the component.\n   * @return A function that, when called, will trigger the origin Observable.\n   */\n  effect<V, R = unknown>(\n    generator: (origin$: Observable<V>) => Observable<R>\n  ): EffectReturnFn<V> {\n    const origin$ = new Subject<V>();\n    generator(origin$)\n      // tied to the lifecycle ðŸ‘‡ of ComponentStore\n      .pipe(takeUntil(this.destroy$))\n      .subscribe();\n\n    return (observableOrValue?: V | Observable<V>): Subscription => {\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      return observable$.pipe(takeUntil(this.destroy$)).subscribe((value) => {\n        // any new ðŸ‘‡ value is pushed into a stream\n        origin$.next(value);\n      });\n    };\n  }\n}\n"],"names":["Observable","Subscription","asapScheduler","ReplaySubject","isObservable","of","concatMap","withLatestFrom","throwError","takeUntil","map","combineLatest","distinctUntilChanged","shareReplay","Subject"],"mappings":"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"}