{"version":3,"file":"component-store.umd.js","sources":["../../../../../modules/component-store/src/debounceSync.ts","../../../../../modules/component-store/src/component-store.ts","../../../../../modules/component-store/index.ts"],"sourcesContent":["/**\n * @license MIT License\n *\n * Copyright (c) 2017-2020 Nicholas Jamieson and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n  asapScheduler,\n  MonoTypeOperatorFunction,\n  Observable,\n  Subscription,\n} from 'rxjs';\n\nexport function debounceSync<T>(): MonoTypeOperatorFunction<T> {\n  return source =>\n    new Observable<T>(observer => {\n      let actionSubscription: Subscription | undefined;\n      let actionValue: T | undefined;\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe({\n          complete: () => {\n            if (actionSubscription) {\n              observer.next(actionValue);\n            }\n            observer.complete();\n          },\n          error: error => observer.error(error),\n          next: value => {\n            actionValue = value;\n            if (!actionSubscription) {\n              actionSubscription = asapScheduler.schedule(() => {\n                observer.next(actionValue);\n                actionSubscription = undefined;\n              });\n              rootSubscription.add(actionSubscription);\n            }\n          },\n        })\n      );\n      return rootSubscription;\n    });\n}\n","import {\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  throwError,\n  combineLatest,\n} from 'rxjs';\nimport {\n  concatMap,\n  takeUntil,\n  withLatestFrom,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n} from 'rxjs/operators';\nimport { debounceSync } from './debounceSync';\n\nexport class ComponentStore<T extends object> {\n  // Should be used only in ngOnDestroy.\n  private readonly destroySubject$ = new ReplaySubject<void>(1);\n  // Exposed to any extending Store to be used for the teardowns.\n  readonly destroy$ = this.destroySubject$.asObservable();\n\n  private readonly stateSubject$ = new ReplaySubject<T>(1);\n  private isInitialized = false;\n  // Needs to be after destroy$ is declared because it's used in select.\n  readonly state$: Observable<T> = this.select(s => s);\n\n  constructor(defaultState?: T) {\n    // State can be initialized either through constructor, or initState or\n    // setState.\n    if (defaultState) {\n      this.initState(defaultState);\n    }\n  }\n\n  /** Completes all relevant Observable streams. */\n  ngOnDestroy() {\n    this.stateSubject$.complete();\n    this.destroySubject$.next();\n  }\n\n  /**\n   * Creates an updater.\n   *\n   * Throws an error if updater is called with synchronous values (either\n   * imperative value or Observable that is synchronous) before ComponentStore\n   * is initialized. If called with async Observable before initialization then\n   * state will not be updated and subscription would be closed.\n   *\n   * @param updaterFn A static updater function that takes 2 parameters (the\n   * current state and an argument object) and returns a new instance of the\n   * state.\n   * @return A function that accepts one argument which is forwarded as the\n   *     second argument to `updaterFn`. Everytime this function is called\n   *     subscribers will be notified of the state change.\n   */\n  updater<V>(\n    updaterFn: (state: T, value: V) => T\n  ): unknown extends V ? () => void : (t: V | Observable<V>) => Subscription {\n    return ((observableOrValue?: V | Observable<V>): Subscription => {\n      let initializationError: Error | undefined;\n      // We can receive either the value or an observable. In case it's a\n      // simple value, we'll wrap it with `of` operator to turn it into\n      // Observable.\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      const subscription = observable$\n        .pipe(\n          concatMap(\n            value =>\n              this.isInitialized\n                ? of(value).pipe(withLatestFrom(this.stateSubject$))\n                : // If state was not initialized, we'll throw an error.\n                  throwError(\n                    Error(`${this.constructor.name} has not been initialized`)\n                  )\n          ),\n          takeUntil(this.destroy$)\n        )\n        .subscribe({\n          next: ([value, currentState]) => {\n            this.stateSubject$.next(updaterFn(currentState, value!));\n          },\n          error: error => {\n            initializationError = error;\n            this.stateSubject$.error(error);\n          },\n        });\n\n      if (initializationError) {\n        throw initializationError;\n      }\n      return subscription;\n    }) as unknown extends V\n      ? () => void\n      : (t: V | Observable<V>) => Subscription;\n  }\n\n  /**\n   * Initializes state. If it was already initialized then it resets the\n   * state.\n   */\n  private initState(state: T): void {\n    this.isInitialized = true;\n    this.stateSubject$.next(state);\n  }\n\n  /**\n   * Sets the state specific value.\n   * @param stateOrUpdaterFn object of the same type as the state or an\n   * updaterFn, returning such object.\n   */\n  setState(stateOrUpdaterFn: T | ((state: T) => T)): void {\n    if (typeof stateOrUpdaterFn !== 'function') {\n      this.initState(stateOrUpdaterFn);\n    } else {\n      this.updater(stateOrUpdaterFn as (state: T) => T)();\n    }\n  }\n\n  /**\n   * Creates a selector.\n   *\n   * This supports chaining up to 4 selectors. More could be added as needed.\n   *\n   * @param projector A pure projection function that takes the current state and\n   *   returns some new slice/projection of that state.\n   * @return An observable of the projector results.\n   */\n  select<R>(projector: (s: T) => R): Observable<R>;\n  select<R, S1>(s1: Observable<S1>, projector: (s1: S1) => R): Observable<R>;\n  select<R, S1, S2>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    projector: (s1: S1, s2: S2) => R\n  ): Observable<R>;\n  select<R, S1, S2, S3>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    projector: (s1: S1, s2: S2, s3: S3) => R\n  ): Observable<R>;\n  select<R, S1, S2, S3, S4>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    s4: Observable<S4>,\n    projector: (s1: S1, s2: S2, s3: S3, s4: S4) => R\n  ): Observable<R>;\n  select<R>(...args: any[]): Observable<R> {\n    let observable$: Observable<R>;\n    // project is always the last argument, so `pop` it from args.\n    const projector: (...args: any[]) => R = args.pop();\n    if (args.length === 0) {\n      // If projector was the only argument then we'll use map operator.\n      observable$ = this.stateSubject$.pipe(map(projector));\n    } else {\n      // If there are multiple arguments, we're chaining selectors, so we need\n      // to take the combineLatest of them before calling the map function.\n      observable$ = combineLatest(args).pipe(\n        // The most performant way to combine Observables avoiding unnecessary\n        // emissions and projector calls.\n        debounceSync(),\n        map((args: any[]) => projector(...args))\n      );\n    }\n    const distinctSharedObservable$ = observable$.pipe(\n      distinctUntilChanged(),\n      shareReplay({\n        refCount: true,\n        bufferSize: 1,\n      }),\n      takeUntil(this.destroy$)\n    );\n    return distinctSharedObservable$;\n  }\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n"],"names":["Observable","Subscription","asapScheduler","ReplaySubject","isObservable","of","concatMap","withLatestFrom","throwError","takeUntil","map","combineLatest","distinctUntilChanged","shareReplay"],"mappings":"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"}