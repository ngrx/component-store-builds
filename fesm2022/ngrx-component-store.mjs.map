{
  "version": 3,
  "sources": ["../../../../modules/component-store/src/debounce-sync.ts", "../../../../modules/component-store/src/lifecycle_hooks.ts", "../../../../modules/component-store/src/component-store.ts", "../../../../modules/component-store/src/index.ts"],
  "sourcesContent": ["/**\n * @license MIT License\n *\n * Copyright (c) 2017-2020 Nicholas Jamieson and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n  asapScheduler,\n  MonoTypeOperatorFunction,\n  Observable,\n  Subscription,\n} from 'rxjs';\n\nexport function debounceSync<T>(): MonoTypeOperatorFunction<T> {\n  return (source) =>\n    new Observable<T>((observer) => {\n      let actionSubscription: Subscription | undefined;\n      let actionValue: T | undefined;\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe({\n          complete: () => {\n            if (actionSubscription) {\n              observer.next(actionValue);\n            }\n            observer.complete();\n          },\n          error: (error) => {\n            observer.error(error);\n          },\n          next: (value) => {\n            actionValue = value;\n            if (!actionSubscription) {\n              actionSubscription = asapScheduler.schedule(() => {\n                observer.next(actionValue);\n                actionSubscription = undefined;\n              });\n              rootSubscription.add(actionSubscription);\n            }\n          },\n        })\n      );\n      return rootSubscription;\n    });\n}\n", "import { Provider, InjectionToken, Type, inject } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { ComponentStore } from './component-store';\n\n/**\n * The interface for the lifecycle hook\n * called after the ComponentStore is instantiated.\n */\nexport interface OnStoreInit {\n  readonly ngrxOnStoreInit: () => void;\n}\n\n/**\n * The interface for the lifecycle hook\n * called only once after the ComponentStore\n * state is first initialized.\n */\nexport interface OnStateInit {\n  readonly ngrxOnStateInit: () => void;\n}\n\n/**\n * Checks to see if the OnInitStore lifecycle hook\n * is defined on the ComponentStore.\n *\n * @param cs ComponentStore type\n * @returns boolean\n */\nexport function isOnStoreInitDefined(cs: unknown): cs is OnStoreInit {\n  return typeof (cs as OnStoreInit).ngrxOnStoreInit === 'function';\n}\n\n/**\n * Checks to see if the OnInitState lifecycle hook\n * is defined on the ComponentStore.\n *\n * @param cs ComponentStore type\n * @returns boolean\n */\nexport function isOnStateInitDefined(cs: unknown): cs is OnStateInit {\n  return typeof (cs as OnStateInit).ngrxOnStateInit === 'function';\n}\n\n/**\n * @description\n *\n * Function that returns the ComponentStore\n * class registered as a provider,\n * and uses a factory provider to instantiate the\n * ComponentStore and run the lifecycle hooks\n * defined on the ComponentStore.\n *\n * @param componentStoreClass The ComponentStore with lifecycle hooks\n * @returns Provider[]\n *\n * @usageNotes\n *\n * ```ts\n * @Injectable()\n * export class MyStore\n *    extends ComponentStore<{ init: boolean }>\n *    implements OnStoreInit, OnStateInit\n *   {\n *\n *   constructor() {\n *     super({ init: true });\n *   }\n *\n *   ngrxOnStoreInit() {\n *     // runs once after store has been instantiated\n *   }\n *\n *   ngrxOnStateInit() {\n *     // runs once after store state has been initialized\n *   }\n * }\n *\n * @Component({\n *   providers: [\n *     provideComponentStore(MyStore)\n *   ]\n * })\n * export class MyComponent {\n *   constructor(private myStore: MyStore) {}\n * }\n * ```\n */\nexport function provideComponentStore<T extends object>(\n  componentStoreClass: Type<ComponentStore<T>>\n): Provider[] {\n  const CS_WITH_HOOKS = new InjectionToken<ComponentStore<T>>(\n    '@ngrx/component-store ComponentStore with Hooks'\n  );\n\n  return [\n    { provide: CS_WITH_HOOKS, useClass: componentStoreClass },\n    {\n      provide: componentStoreClass,\n      useFactory: () => {\n        const componentStore = inject(CS_WITH_HOOKS);\n\n        // Set private property that CS has been provided with lifecycle hooks\n        componentStore['ɵhasProvider'] = true;\n\n        if (isOnStoreInitDefined(componentStore)) {\n          componentStore.ngrxOnStoreInit();\n        }\n\n        if (isOnStateInitDefined(componentStore)) {\n          componentStore.state$\n            .pipe(take(1))\n            .subscribe(() => componentStore.ngrxOnStateInit());\n        }\n\n        return componentStore;\n      },\n    },\n  ];\n}\n", "import {\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  throwError,\n  combineLatest,\n  Subject,\n  queueScheduler,\n  scheduled,\n  asapScheduler,\n  EMPTY,\n  ObservedValueOf,\n} from 'rxjs';\nimport {\n  takeUntil,\n  withLatestFrom,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n  take,\n  tap,\n  catchError,\n  observeOn,\n} from 'rxjs/operators';\nimport { debounceSync } from './debounce-sync';\nimport {\n  Injectable,\n  OnDestroy,\n  Optional,\n  InjectionToken,\n  Inject,\n  isDevMode,\n  Signal,\n  computed,\n  type ValueEqualityFn,\n  type CreateComputedOptions,\n} from '@angular/core';\nimport { isOnStateInitDefined, isOnStoreInitDefined } from './lifecycle_hooks';\nimport { toSignal } from '@angular/core/rxjs-interop';\n\nexport interface SelectConfig<T = unknown> {\n  debounce?: boolean;\n  equal?: ValueEqualityFn<T>;\n}\n\nexport const INITIAL_STATE_TOKEN = new InjectionToken(\n  '@ngrx/component-store Initial State'\n);\n\nexport type SelectorResults<Selectors extends Observable<unknown>[]> = {\n  [Key in keyof Selectors]: Selectors[Key] extends Observable<infer U>\n    ? U\n    : never;\n};\n\nexport type Projector<Selectors extends Observable<unknown>[], Result> = (\n  ...args: SelectorResults<Selectors>\n) => Result;\n\ntype SignalsProjector<Signals extends Signal<unknown>[], Result> = (\n  ...values: {\n    [Key in keyof Signals]: Signals[Key] extends Signal<infer Value>\n      ? Value\n      : never;\n  }\n) => Result;\n\ninterface SelectSignalOptions<T> {\n  /**\n   * A comparison function which defines equality for select results.\n   */\n  equal?: ValueEqualityFn<T>;\n}\n\n@Injectable()\nexport class ComponentStore<T extends object> implements OnDestroy {\n  // Should be used only in ngOnDestroy.\n  private readonly destroySubject$ = new ReplaySubject<void>(1);\n  // Exposed to any extending Store to be used for the teardown.\n  readonly destroy$ = this.destroySubject$.asObservable();\n\n  private readonly stateSubject$ = new ReplaySubject<T>(1);\n  private isInitialized = false;\n  // Needs to be after destroy$ is declared because it's used in select.\n  readonly state$: Observable<T> = this.select((s) => s);\n  readonly state: Signal<T> = toSignal(\n    this.stateSubject$.pipe(takeUntil(this.destroy$)),\n    { requireSync: false, manualCleanup: true }\n  ) as Signal<T>;\n  private ɵhasProvider = false;\n\n  constructor(@Optional() @Inject(INITIAL_STATE_TOKEN) defaultState?: T) {\n    // State can be initialized either through constructor or setState.\n    if (defaultState) {\n      this.initState(defaultState);\n    }\n\n    this.checkProviderForHooks();\n  }\n\n  /** Completes all relevant Observable streams. */\n  ngOnDestroy() {\n    this.stateSubject$.complete();\n    this.destroySubject$.next();\n  }\n\n  /**\n   * Creates an updater.\n   *\n   * Throws an error if updater is called with synchronous values (either\n   * imperative value or Observable that is synchronous) before ComponentStore\n   * is initialized. If called with async Observable before initialization then\n   * state will not be updated and subscription would be closed.\n   *\n   * @param updaterFn A static updater function that takes 2 parameters (the\n   * current state and an argument object) and returns a new instance of the\n   * state.\n   * @return A function that accepts one argument which is forwarded as the\n   *     second argument to `updaterFn`. Every time this function is called\n   *     subscribers will be notified of the state change.\n   */\n  updater<\n    // Allow to force-provide the type\n    ProvidedType = void,\n    // This type is derived from the `value` property, defaulting to void if it's missing\n    OriginType = ProvidedType,\n    // The Value type is assigned from the Origin\n    ValueType = OriginType,\n    // Return either an empty callback or a function requiring specific types as inputs\n    ReturnType = OriginType extends void\n      ? () => void\n      : (observableOrValue: ValueType | Observable<ValueType>) => Subscription\n  >(updaterFn: (state: T, value: OriginType) => T): ReturnType {\n    return ((\n      observableOrValue?: OriginType | Observable<OriginType>\n    ): Subscription => {\n      // We need to explicitly throw an error if a synchronous error occurs.\n      // This is necessary to make synchronous errors catchable.\n      let isSyncUpdate = true;\n      let syncError: unknown;\n      // We can receive either the value or an observable. In case it's a\n      // simple value, we'll wrap it with `of` operator to turn it into\n      // Observable.\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      const subscription = observable$\n        .pipe(\n          // Push the value into queueScheduler\n          observeOn(queueScheduler),\n          // If the state is not initialized yet, we'll throw an error.\n          tap(() => this.assertStateIsInitialized()),\n          withLatestFrom(this.stateSubject$),\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          map(([value, currentState]) => updaterFn(currentState, value!)),\n          tap((newState) => this.stateSubject$.next(newState)),\n          catchError((error: unknown) => {\n            if (isSyncUpdate) {\n              syncError = error;\n              return EMPTY;\n            }\n\n            return throwError(error);\n          }),\n          takeUntil(this.destroy$)\n        )\n        .subscribe();\n\n      if (syncError) {\n        throw syncError;\n      }\n      isSyncUpdate = false;\n\n      return subscription;\n    }) as unknown as ReturnType;\n  }\n\n  /**\n   * Initializes state. If it was already initialized then it resets the\n   * state.\n   */\n  private initState(state: T): void {\n    scheduled([state], queueScheduler).subscribe((s) => {\n      this.isInitialized = true;\n      this.stateSubject$.next(s);\n    });\n  }\n\n  /**\n   * Sets the state specific value.\n   * @param stateOrUpdaterFn object of the same type as the state or an\n   * updaterFn, returning such object.\n   */\n  setState(stateOrUpdaterFn: T | ((state: T) => T)): void {\n    if (typeof stateOrUpdaterFn !== 'function') {\n      this.initState(stateOrUpdaterFn);\n    } else {\n      this.updater(stateOrUpdaterFn as (state: T) => T)();\n    }\n  }\n\n  /**\n   * Patches the state with provided partial state.\n   *\n   * @param partialStateOrUpdaterFn a partial state or a partial updater\n   * function that accepts the state and returns the partial state.\n   * @throws Error if the state is not initialized.\n   */\n  patchState(\n    partialStateOrUpdaterFn:\n      | Partial<T>\n      | Observable<Partial<T>>\n      | ((state: T) => Partial<T>)\n  ): void {\n    const patchedState =\n      typeof partialStateOrUpdaterFn === 'function'\n        ? partialStateOrUpdaterFn(this.get())\n        : partialStateOrUpdaterFn;\n\n    this.updater((state, partialState: Partial<T>) => ({\n      ...state,\n      ...partialState,\n    }))(patchedState);\n  }\n\n  protected get(): T;\n  protected get<R>(projector: (s: T) => R): R;\n  protected get<R>(projector?: (s: T) => R): R | T {\n    this.assertStateIsInitialized();\n    let value: R | T;\n\n    this.stateSubject$.pipe(take(1)).subscribe((state) => {\n      value = projector ? projector(state) : state;\n    });\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return value!;\n  }\n\n  /**\n   * Creates a selector.\n   *\n   * @param projector A pure projection function that takes the current state and\n   *   returns some new slice/projection of that state.\n   * @param config SelectConfig that changes the behavior of selector, including\n   *   the debouncing of the values until the state is settled.\n   * @return An observable of the projector results.\n   */\n  select<Result>(\n    projector: (s: T) => Result,\n    config?: SelectConfig<Result>\n  ): Observable<Result>;\n  select<SelectorsObject extends Record<string, Observable<unknown>>>(\n    selectorsObject: SelectorsObject,\n    config?: SelectConfig<{\n      [K in keyof SelectorsObject]: ObservedValueOf<SelectorsObject[K]>;\n    }>\n  ): Observable<{\n    [K in keyof SelectorsObject]: ObservedValueOf<SelectorsObject[K]>;\n  }>;\n  select<Selectors extends Observable<unknown>[], Result>(\n    ...selectorsWithProjector: [\n      ...selectors: Selectors,\n      projector: Projector<Selectors, Result>\n    ]\n  ): Observable<Result>;\n  select<Selectors extends Observable<unknown>[], Result>(\n    ...selectorsWithProjectorAndConfig: [\n      ...selectors: Selectors,\n      projector: Projector<Selectors, Result>,\n      config: SelectConfig<Result>\n    ]\n  ): Observable<Result>;\n  select<\n    Selectors extends Array<\n      Observable<unknown> | SelectConfig<Result> | ProjectorFn | SelectorsObject\n    >,\n    Result,\n    ProjectorFn extends (...a: unknown[]) => Result,\n    SelectorsObject extends Record<string, Observable<unknown>>\n  >(...args: Selectors): Observable<Result> {\n    const { observablesOrSelectorsObject, projector, config } =\n      processSelectorArgs<Selectors, Result, ProjectorFn, SelectorsObject>(\n        args\n      );\n\n    const source$ = hasProjectFnOnly(observablesOrSelectorsObject, projector)\n      ? this.stateSubject$\n      : combineLatest(observablesOrSelectorsObject as any);\n\n    return source$.pipe(\n      config.debounce ? debounceSync() : noopOperator(),\n      (projector\n        ? map((projectorArgs) =>\n            // projectorArgs could be an Array in case where the entire state is an Array, so adding this check\n            (observablesOrSelectorsObject as Observable<unknown>[]).length >\n              0 && Array.isArray(projectorArgs)\n              ? projector(...projectorArgs)\n              : projector(projectorArgs)\n          )\n        : noopOperator()) as () => Observable<Result>,\n      distinctUntilChanged(config.equal),\n      shareReplay({\n        refCount: true,\n        bufferSize: 1,\n      }),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  /**\n   * Creates a signal from the provided state projector function.\n   */\n  selectSignal<Result>(\n    projector: (state: T) => Result,\n    options?: SelectSignalOptions<Result>\n  ): Signal<Result>;\n  /**\n   * Creates a signal by combining provided signals.\n   */\n  selectSignal<Signals extends Signal<unknown>[], Result>(\n    ...args: [...signals: Signals, projector: SignalsProjector<Signals, Result>]\n  ): Signal<Result>;\n  /**\n   * Creates a signal by combining provided signals.\n   */\n  selectSignal<Signals extends Signal<unknown>[], Result>(\n    ...args: [\n      ...signals: Signals,\n      projector: SignalsProjector<Signals, Result>,\n      options: SelectSignalOptions<Result>\n    ]\n  ): Signal<Result>;\n  selectSignal(\n    ...args:\n      | [(state: T) => unknown, SelectSignalOptions<unknown>?]\n      | [\n          ...signals: Signal<unknown>[],\n          projector: (...values: unknown[]) => unknown\n        ]\n      | [\n          ...signals: Signal<unknown>[],\n          projector: (...values: unknown[]) => unknown,\n          options: SelectSignalOptions<unknown>\n        ]\n  ): Signal<unknown> {\n    const selectSignalArgs = [...args];\n    const options: CreateComputedOptions<unknown> =\n      typeof selectSignalArgs[args.length - 1] === 'object'\n        ? (selectSignalArgs.pop() as SelectSignalOptions<unknown>)\n        : {};\n    const projector = selectSignalArgs.pop() as (\n      ...values: unknown[]\n    ) => unknown;\n    const signals = selectSignalArgs as Signal<unknown>[];\n\n    const computation =\n      signals.length === 0\n        ? () => projector(this.state())\n        : () => {\n            const values = signals.map((signal) => signal());\n            return projector(...values);\n          };\n\n    return computed(computation, options);\n  }\n\n  /**\n   * Creates an effect.\n   *\n   * This effect is subscribed to throughout the lifecycle of the ComponentStore.\n   * @param generator A function that takes an origin Observable input and\n   *     returns an Observable. The Observable that is returned will be\n   *     subscribed to for the life of the component.\n   * @return A function that, when called, will trigger the origin Observable.\n   */\n  effect<\n    // This type quickly became part of effect 'API'\n    ProvidedType = void,\n    // The actual origin$ type, which could be unknown, when not specified\n    OriginType extends\n      | Observable<ProvidedType>\n      | unknown = Observable<ProvidedType>,\n    // Unwrapped actual type of the origin$ Observable, after default was applied\n    ObservableType = OriginType extends Observable<infer A> ? A : never,\n    // Return either an optional callback or a function requiring specific types as inputs\n    ReturnType = ProvidedType | ObservableType extends void\n      ? (\n          observableOrValue?: ObservableType | Observable<ObservableType>\n        ) => Subscription\n      : (\n          observableOrValue: ObservableType | Observable<ObservableType>\n        ) => Subscription\n  >(generator: (origin$: OriginType) => Observable<unknown>): ReturnType {\n    const origin$ = new Subject<ObservableType>();\n    generator(origin$ as OriginType)\n      // tied to the lifecycle 👇 of ComponentStore\n      .pipe(takeUntil(this.destroy$))\n      .subscribe();\n\n    return ((\n      observableOrValue?: ObservableType | Observable<ObservableType>\n    ): Subscription => {\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      return observable$.pipe(takeUntil(this.destroy$)).subscribe((value) => {\n        // any new 👇 value is pushed into a stream\n        origin$.next(value as ObservableType);\n      });\n    }) as unknown as ReturnType;\n  }\n\n  /**\n   * Used to check if lifecycle hooks are defined\n   * but not used with provideComponentStore()\n   */\n  private checkProviderForHooks() {\n    asapScheduler.schedule(() => {\n      if (\n        isDevMode() &&\n        (isOnStoreInitDefined(this) || isOnStateInitDefined(this)) &&\n        !this.ɵhasProvider\n      ) {\n        const warnings = [\n          isOnStoreInitDefined(this) ? 'OnStoreInit' : '',\n          isOnStateInitDefined(this) ? 'OnStateInit' : '',\n        ].filter((defined) => defined);\n\n        console.warn(\n          `@ngrx/component-store: ${\n            this.constructor.name\n          } has the ${warnings.join(' and ')} ` +\n            'lifecycle hook(s) implemented without being provided using the ' +\n            `provideComponentStore(${this.constructor.name}) function. ` +\n            `To resolve this, provide the component store via provideComponentStore(${this.constructor.name})`\n        );\n      }\n    });\n  }\n\n  private assertStateIsInitialized(): void {\n    if (!this.isInitialized) {\n      throw new Error(\n        `${this.constructor.name} has not been initialized yet. ` +\n          `Please make sure it is initialized before updating/getting.`\n      );\n    }\n  }\n}\n\nfunction processSelectorArgs<\n  Selectors extends Array<\n    Observable<unknown> | SelectConfig<Result> | ProjectorFn | SelectorsObject\n  >,\n  Result,\n  ProjectorFn extends (...a: unknown[]) => Result,\n  SelectorsObject extends Record<string, Observable<unknown>>\n>(\n  args: Selectors\n):\n  | {\n      observablesOrSelectorsObject: Observable<unknown>[];\n      projector: ProjectorFn;\n      config: Required<SelectConfig<Result>>;\n    }\n  | {\n      observablesOrSelectorsObject: SelectorsObject;\n      projector: undefined;\n      config: Required<SelectConfig<Result>>;\n    } {\n  const selectorArgs = Array.from(args);\n  const defaultEqualityFn: ValueEqualityFn<Result> = (previous, current) =>\n    previous === current;\n\n  // Assign default values.\n  let config: Required<SelectConfig<Result>> = {\n    debounce: false,\n    equal: defaultEqualityFn,\n  };\n\n  // Last argument is either config or projector or selectorsObject\n  if (isSelectConfig(selectorArgs[selectorArgs.length - 1])) {\n    config = { ...config, ...selectorArgs.pop() };\n  }\n\n  // At this point selectorArgs is either projector, selectors with projector or selectorsObject\n  if (selectorArgs.length === 1 && typeof selectorArgs[0] !== 'function') {\n    // this is a selectorsObject\n    return {\n      observablesOrSelectorsObject: selectorArgs[0] as SelectorsObject,\n      projector: undefined,\n      config,\n    };\n  }\n\n  const projector = selectorArgs.pop() as ProjectorFn;\n\n  // The Observables to combine, if there are any left.\n  const observables = selectorArgs as Observable<unknown>[];\n  return {\n    observablesOrSelectorsObject: observables,\n    projector,\n    config,\n  };\n}\n\nfunction isSelectConfig(\n  arg: SelectConfig<unknown> | unknown\n): arg is SelectConfig<unknown> {\n  const typedArg = arg as SelectConfig<unknown>;\n  return (\n    typeof typedArg.debounce !== 'undefined' ||\n    typeof typedArg.equal !== 'undefined'\n  );\n}\n\nfunction hasProjectFnOnly(\n  observablesOrSelectorsObject: unknown[] | Record<string, unknown>,\n  projector: unknown\n) {\n  return (\n    Array.isArray(observablesOrSelectorsObject) &&\n    observablesOrSelectorsObject.length === 0 &&\n    projector\n  );\n}\n\nfunction noopOperator(): <T>(source$: Observable<T>) => typeof source$ {\n  return (source$) => source$;\n}\n", "import * as operators from '@ngrx/operators';\n\nexport * from './component-store';\nexport {\n  provideComponentStore,\n  OnStateInit,\n  OnStoreInit,\n} from './lifecycle_hooks';\n\n/**\n * @deprecated Use `tapResponse` from `@ngrx/operators` instead.\n */\nexport const tapResponse = operators.tapResponse;\n"],
  "mappings": "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",
  "names": ["asapScheduler", "take", "InjectionToken"]
}
